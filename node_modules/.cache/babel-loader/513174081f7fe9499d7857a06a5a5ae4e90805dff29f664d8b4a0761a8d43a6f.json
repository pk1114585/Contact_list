{"ast":null,"code":"var _jsxFileName = \"D:\\\\Download\\\\coding ninja backend test\\\\Contact-List\\\\src\\\\context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Importing dependencies from the react\nimport { createContext, useContext, useState, useEffect, useRef } from \"react\";\n\n// Importing toast to disply the notification\nimport { toast } from 'react-toastify';\n\n// makeing the contextAPI , \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst contactApi = /*#__PURE__*/createContext();\n// exporting the value from this file, \nexport function useValue() {\n  _s();\n  const value = useContext(contactApi);\n  return value;\n}\n// the main functino in which all the function will be perforing\n_s(useValue, \"ksutO2/Ix3UeCrGnhyM+QEP505Y=\");\nfunction CustomeContext(_ref) {\n  _s2();\n  let {\n    children\n  } = _ref;\n  // States for storring the contact list in the local state\n  const [contactList, setContactList] = useState([]);\n  // for checking if it is delying the action or not\n  const [isLoading, setIsLoading] = useState(false);\n  // REF used in updating and adding in the local state of the contactList\n  const nameRef = useRef();\n  const emailRef = useRef();\n  const numberRef = useRef();\n\n  // fucntion whill help to fetch the contact from the List\n  const fetchContactList = async () => {\n    setIsLoading(true);\n    let data = await fetch('https://jsonplaceholder.typicode.com/users/');\n    let contact = await data.json();\n    // console.log(contact);\n    setContactList(contact);\n    setIsLoading(false);\n  };\n\n  // This is delete function whill will delete the contactList with given id\n  const deleteContact = id => {\n    const index = contactList.findIndex(contact => contact.id === id);\n    if (index !== -1) {\n      let newContactList = [...contactList];\n      newContactList.splice(index, 1);\n      //   Displyed the toast messages\n      toast.success(\"Contact Deleted Successfully !\");\n      setContactList(newContactList);\n    }\n  };\n  // This will reset the vlaue of the input firld to normal\n  const handleClear = () => {\n    nameRef.current.value = \"\";\n    emailRef.current.value = \"\";\n    numberRef.current.value = \"\";\n  };\n\n  // Componect Did Mount\n  useEffect(() => {\n    fetchContactList();\n  }, []);\n\n  // \n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(contactApi.Provider, {\n      value: {\n        contactList,\n        setContactList,\n        isLoading,\n        setIsLoading,\n        deleteContact,\n        nameRef,\n        emailRef,\n        numberRef,\n        handleClear\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s2(CustomeContext, \"Imd/i0JEoh19Z2oKm7D10ySrXCc=\");\n_c = CustomeContext;\nexport default CustomeContext;\nvar _c;\n$RefreshReg$(_c, \"CustomeContext\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useRef","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","contactApi","useValue","_s","value","CustomeContext","_ref","_s2","children","contactList","setContactList","isLoading","setIsLoading","nameRef","emailRef","numberRef","fetchContactList","data","fetch","contact","json","deleteContact","id","index","findIndex","newContactList","splice","success","handleClear","current","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Download/coding ninja backend test/Contact-List/src/context.js"],"sourcesContent":["// Importing dependencies from the react\nimport { createContext, useContext, useState , useEffect , useRef } from \"react\";\n\n// Importing toast to disply the notification\nimport {toast} from 'react-toastify';\n\n// makeing the contextAPI , \nconst contactApi = createContext();\n// exporting the value from this file, \nexport function useValue(){\n    const value = useContext(contactApi);\n    return value;\n}\n// the main functino in which all the function will be perforing\nfunction CustomeContext({children}){\n    // States for storring the contact list in the local state\n    const [contactList, setContactList] = useState([]);\n    // for checking if it is delying the action or not\n    const [isLoading, setIsLoading] = useState(false);\n    // REF used in updating and adding in the local state of the contactList\n    const nameRef = useRef();\n    const emailRef = useRef();\n    const numberRef = useRef();\n\n    // fucntion whill help to fetch the contact from the List\n    const fetchContactList = async() =>{\n        setIsLoading(true);\n        let data = await fetch('https://jsonplaceholder.typicode.com/users/');\n        let contact = await data.json();\n        // console.log(contact);\n        setContactList(contact);\n        setIsLoading(false);\n    }\n\n    // This is delete function whill will delete the contactList with given id\n    const deleteContact = (id) => {\n        const index = contactList.findIndex((contact) => contact.id === id);\n        if (index !== -1) {\n          let newContactList = [...contactList];\n          newContactList.splice(index, 1);\n        //   Displyed the toast messages\n          toast.success(\"Contact Deleted Successfully !\");\n          setContactList(newContactList);\n        }\n    };\n    // This will reset the vlaue of the input firld to normal\n    const handleClear = ()=>{\n        nameRef.current.value = \"\";\n        emailRef.current.value = \"\";\n        numberRef.current.value = \"\";\n    }\n      \n    // Componect Did Mount\n    useEffect(()=>{\n        fetchContactList();\n    }, []);\n\n    // \n    return (\n        <>\n            <contactApi.Provider value={{contactList, setContactList, isLoading, setIsLoading, deleteContact\n                                        ,nameRef, emailRef ,numberRef, handleClear}}>\n                {children}\n            </contactApi.Provider>\n        </>\n    )\n\n}\n\nexport default CustomeContext;"],"mappings":";;;AAAA;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAGC,SAAS,EAAGC,MAAM,QAAQ,OAAO;;AAEhF;AACA,SAAQC,KAAK,QAAO,gBAAgB;;AAEpC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,UAAU,gBAAGV,aAAa,CAAC,CAAC;AAClC;AACA,OAAO,SAASW,QAAQA,CAAA,EAAE;EAAAC,EAAA;EACtB,MAAMC,KAAK,GAAGZ,UAAU,CAACS,UAAU,CAAC;EACpC,OAAOG,KAAK;AAChB;AACA;AAAAD,EAAA,CAJgBD,QAAQ;AAKxB,SAASG,cAAcA,CAAAC,IAAA,EAAY;EAAAC,GAAA;EAAA,IAAX;IAACC;EAAQ,CAAC,GAAAF,IAAA;EAC9B;EACA,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAClD;EACA,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACjD;EACA,MAAMoB,OAAO,GAAGlB,MAAM,CAAC,CAAC;EACxB,MAAMmB,QAAQ,GAAGnB,MAAM,CAAC,CAAC;EACzB,MAAMoB,SAAS,GAAGpB,MAAM,CAAC,CAAC;;EAE1B;EACA,MAAMqB,gBAAgB,GAAG,MAAAA,CAAA,KAAU;IAC/BJ,YAAY,CAAC,IAAI,CAAC;IAClB,IAAIK,IAAI,GAAG,MAAMC,KAAK,CAAC,6CAA6C,CAAC;IACrE,IAAIC,OAAO,GAAG,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;IAC/B;IACAV,cAAc,CAACS,OAAO,CAAC;IACvBP,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;;EAED;EACA,MAAMS,aAAa,GAAIC,EAAE,IAAK;IAC1B,MAAMC,KAAK,GAAGd,WAAW,CAACe,SAAS,CAAEL,OAAO,IAAKA,OAAO,CAACG,EAAE,KAAKA,EAAE,CAAC;IACnE,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAIE,cAAc,GAAG,CAAC,GAAGhB,WAAW,CAAC;MACrCgB,cAAc,CAACC,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;MACjC;MACE3B,KAAK,CAAC+B,OAAO,CAAC,gCAAgC,CAAC;MAC/CjB,cAAc,CAACe,cAAc,CAAC;IAChC;EACJ,CAAC;EACD;EACA,MAAMG,WAAW,GAAGA,CAAA,KAAI;IACpBf,OAAO,CAACgB,OAAO,CAACzB,KAAK,GAAG,EAAE;IAC1BU,QAAQ,CAACe,OAAO,CAACzB,KAAK,GAAG,EAAE;IAC3BW,SAAS,CAACc,OAAO,CAACzB,KAAK,GAAG,EAAE;EAChC,CAAC;;EAED;EACAV,SAAS,CAAC,MAAI;IACVsB,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACIlB,OAAA,CAAAE,SAAA;IAAAQ,QAAA,eACIV,OAAA,CAACG,UAAU,CAAC6B,QAAQ;MAAC1B,KAAK,EAAE;QAACK,WAAW;QAAEC,cAAc;QAAEC,SAAS;QAAEC,YAAY;QAAES,aAAa;QACnER,OAAO;QAAEC,QAAQ;QAAEC,SAAS;QAAEa;MAAW,CAAE;MAAApB,QAAA,EACnEA;IAAQ;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ;EAAC,gBACxB,CAAC;AAGX;AAAC3B,GAAA,CArDQF,cAAc;AAAA8B,EAAA,GAAd9B,cAAc;AAuDvB,eAAeA,cAAc;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}